stages:
  - test
  - release

# TEST STAGE SETUP

.cache: &cache
  key:
    files:
      - package.json
  paths:
    - node_modules/
  policy: pull

.mr-only:
  rules: &mr-only
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - src/*
        - src/**/*
        - src/**/**/*
        - src/**/**/**/*
        - src/**/**/**/**/*
        - package*.json
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.merge_requests: &merge_requests
  stage: test
  image: node:14-bullseye-slim
  cache: *cache
  rules: *mr-only

npm-cache:
  # Update the NPM cache only when required
  # See: https://gitlab.com/gitlab-org/gitlab/-/issues/224650
  # See: https://github.com/npm/cli/issues/564
  stage: .pre
  image: node:14-bullseye-slim
  rules:
    - changes:
        - package.json
  cache:
    key:
      files:
        - package.json
    paths:
      - node_modules/
    policy: push
  before_script:
    - echo "@france-atelier:registry=https://gitlab.com/api/v4/packages/npm/" > .npmrc
    - echo //gitlab.com/api/v4/packages/npm/:_authToken=\"${CI_JOB_TOKEN}\" >> .npmrc
  script:
    - npm ci

# TEST STAGE JOBS

test-quality:
  <<: *merge_requests
  script:
    - npm run lint || true
  artifacts:
    reports:
      codequality: gl-codequality.json

test-build:
  <<: *merge_requests
  script:
    - npm run build

test-unit:
  <<: *merge_requests
  script:
    - npm run test

# TODO code coverage, code quality report, SAST?

# RELEASE STAGE JOBS

publish:
  stage: release
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  variables:
    # IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG # registry/repo:branch
    IMAGE_TAG: $CI_REGISTRY_IMAGE # registry/repo
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --update jq
    - echo "@france-atelier:registry=https://gitlab.com/api/v4/packages/npm/" > .npmrc
    - echo //gitlab.com/api/v4/packages/npm/:_authToken=\"${CI_JOB_TOKEN}\" >> .npmrc
    - export VERSION=$(cat package.json | jq -r .version)
  script:
    - docker build --pull --tag "$IMAGE_TAG" .
    - docker tag $IMAGE_TAG $IMAGE_TAG:$VERSION
    - docker push $IMAGE_TAG
    - docker push $IMAGE_TAG:$VERSION
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
